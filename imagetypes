import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

def process_image(image_path):
    # Load the image
    image = cv2.imread(image_path)
    if image is None:
        print("Error: Could not open or find the image. Make sure the path is correct.")
        return
    
    # Convert BGR to RGB for proper display in matplotlib
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Print size and shape of the image
    height, width, channels = image.shape
    print(f"Image Shape: {image.shape} (Height: {height}, Width: {width}, Channels: {channels})")
    
    # Convert to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Convert to binary
    _, binary_image = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)
    
    # Scale down the image
    scaled_image = cv2.resize(image_rgb, (width // 2, height // 2))
    
    # Denoise the image
    denoised_image = cv2.fastNlMeansDenoisingColored(image, None, 10, 10, 7, 21)
    denoised_image_rgb = cv2.cvtColor(denoised_image, cv2.COLOR_BGR2RGB)
    
    # Display images using matplotlib
    fig, axes = plt.subplots(1, 4, figsize=(15, 5))
    
    axes[0].imshow(image_rgb)
    axes[0].set_title("Original Image")
    axes[0].axis("off")
    
    axes[1].imshow(gray_image, cmap='gray')
    axes[1].set_title("Grayscale Image")
    axes[1].axis("off")
    
    axes[2].imshow(binary_image, cmap='gray')
    axes[2].set_title("Binary Image")
    axes[2].axis("off")
    
    axes[3].imshow(denoised_image_rgb)
    axes[3].set_title("Denoised Image")
    axes[3].axis("off")
    
    plt.show()
    print("Image processing complete.")

# Upload image in Google Colab
print("Please upload an image file.")
uploaded = files.upload()
image_path = list(uploaded.keys())[0]  # Get the uploaded file name
process_image(image_path)
